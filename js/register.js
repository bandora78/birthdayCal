document.addEventListener('DOMContentLoaded', () => {
    // Get form elements
    const kindergartenForm = document.getElementById('kindergartenRegistrationForm');
    const gardenLinkSection = document.getElementById('gardenLinkSection');
    const childrenList = document.getElementById('childrenList');
    const childrenTableBody = document.getElementById('childrenTableBody');
    const gardenIdDisplay = document.getElementById('gardenIdDisplay');
    const parentRegLink = document.getElementById('parentRegLink');
    const copyParentLinkBtn = document.getElementById('copyParentLinkBtn');
    const copyParentLinkMsg = document.getElementById('copyParentLinkMsg');
    
    let currentGardenId = null;
    
    // Clear hash on load to prevent automatic redirection
    if (window.location.hash && !window.location.search) {
        history.replaceState(null, '', window.location.pathname);
    }

    // Check if we should show children list directly
    if (window.location.hash === '#childrenList') {
        const kindergartens = storage.get('kindergartens') || [];
        if (kindergartens.length > 0) {
            kindergartenForm.style.display = 'none';
            childrenList.style.display = 'block';
            const lastKindergarten = kindergartens[kindergartens.length - 1];
            currentGardenId = lastKindergarten.gardenId;
            sessionStorage.setItem('currentGardenId', currentGardenId);
            
            // Show garden ID in admin mode
            gardenLinkSection.style.display = 'block';
            gardenIdDisplay.textContent = currentGardenId;
            const parentLink = `${window.location.origin}/children.html?gardenId=${currentGardenId}`;
            parentRegLink.value = parentLink;
            
            window.loadChildren();
        } else {
            alert('יש להשלים קודם את רישום הגן');
            window.location.href = 'register.html';
        }
    }

    // Check if we have a gardenId in the URL
    const urlParams = new URLSearchParams(window.location.search);
    const gardenIdFromUrl = urlParams.get('gardenId');

    if (gardenIdFromUrl) {
        // If we have a gardenId in the URL, we're in parent registration mode
        sessionStorage.setItem('currentGardenId', gardenIdFromUrl);
        kindergartenForm.style.display = 'none';
        gardenLinkSection.style.display = 'none';
        childrenList.style.display = 'block';
        window.loadChildren();
    } else {
        // We're in garden registration mode
        kindergartenForm.addEventListener('submit', async (e) => {
            e.preventDefault();
            
            const kindergartenName = document.getElementById('kindergartenName').value;
            const schoolYear = document.getElementById('schoolYear').value;
            const teacherName = document.getElementById('teacherName').value;
            const email = document.getElementById('email').value;
            const phone = document.getElementById('phone').value;
            
            // Generate a unique garden ID (Supabase will generate UUID for id)
            // We still generate a unique gardenId for the link/session storage for now
            const gardenId = window.generateGardenId(); 
            
            // Create new kindergarten object
            const newKindergarten = {
                // Supabase will generate id (UUID)
                name: kindergartenName,
                admin_email: email, // Use the email as admin_email
                // schoolYear, // Decide if we need these fields in DB
                // teacherName,
                // phone
            };
            
            // Save to Supabase
            const { data, error } = await supabase
                .from('kindergartens')
                .insert([newKindergarten]);

            if (error) {
                console.error('Error saving kindergarten:', error);
                alert('שגיאה בשמירת פרטי הגן. אנא נסה שנית.');
                return;
            }
            
            // Assuming the insert was successful, store the generated ID and redirect
            const insertedKindergarten = data[0];
            const newGardenSupabaseId = insertedKindergarten.id; // Get the UUID generated by Supabase
            const newGardenDisplayId = gardenId; // Use the generated display ID for the link/session

            // Store current garden ID in session storage (using the display ID for consistency with URL parameter)
            sessionStorage.setItem('currentGardenId', newGardenDisplayId);
            // Optionally store the Supabase UUID if needed later, e.g., sessionStorage.setItem('currentGardenSupabaseId', newGardenSupabaseId);

            alert('הגן נרשם בהצלחה!');
            
            // Redirect to children page with the new garden display ID
            window.location.href = `children.html?gardenId=${newGardenDisplayId}`;
        });
    }

    // Check if kindergarten is already registered (admin mode)
    const kindergartens = storage.get('kindergartens') || [];
    if (kindergartens.length > 0 && !gardenIdFromUrl && !window.location.hash) {
        const lastKindergarten = kindergartens[kindergartens.length - 1];
        currentGardenId = lastKindergarten.gardenId;
        sessionStorage.setItem('currentGardenId', currentGardenId);
        
        // Show garden ID and parent link
        gardenLinkSection.style.display = 'block';
        gardenIdDisplay.textContent = currentGardenId;
        const parentLink = `${window.location.origin}/children.html?gardenId=${currentGardenId}`;
        parentRegLink.value = parentLink;
        
        // Hide form, show children list
        kindergartenForm.style.display = 'none';
        childrenList.style.display = 'block';
        
        // Load children for current garden
        window.loadChildren();
    }

    // Copy link functionality (moved outside the conditions to avoid duplication)
    if (copyParentLinkBtn) {
        copyParentLinkBtn.addEventListener('click', () => {
            parentRegLink.select();
            document.execCommand('copy');
            copyParentLinkMsg.style.display = 'block';
            setTimeout(() => {
                copyParentLinkMsg.style.display = 'none';
            }, 2000);
        });
    }
}); 